---
title: 'Modeling'
subtitle: '[Data-based Storytelling](https://danielw2904.github.io/data-based-storytelling/)'
title-slide-attributes: 
  data-background-image: Graphics/D2.jpg
author: 
- Daniel Winkler
- Nils WlÃ¶mert
institute: 'Institute for Retailing & Data Science'
bibliography: data_storytelling.bib  
format: 
    revealjs:
        theme: [simple, rds_theme.scss]
        logo: Graphics/WU_logo.png
        footer: "[Data-based Storytelling](https://danielw2904.github.io/data-based-storytelling/)"
        height: 1080
        width: 1920
        center-title-slide: false
        center: false
        progress: false
        embed-resources: true # slower compile -> activate later
        code-link: true
        code-overflow: wrap
        incremental: false
        echo: true
        code-fold: true
        fig-align: center
        fig-width: 18
        fig-height: 8
---

## Getting into modelling!


::: {style="text-align: center"}
![[source](https://commons.wikimedia.org/wiki/File:ModelsCatwalk.jpg#/media/Archivo:ModelsCatwalk.jpg)](Graphics/ModelsCatwalk.jpg){width=70%}
:::

## Required skills

- Data-science teams have different skill requirements:

::: {style="text-align: center"}
![[Data Science and the Art of Persuasion](https://hbr.org/2019/01/data-science-and-the-art-of-persuasion)](Graphics/talents.png){width=80%}
:::

## Types of analyses

::: {.center-screen}
- Four types of data stories:
- Descriptive - *What has happened?*
- Predictive - *What will happen?*
- Causal - *Why does it happen?*
- Prescriptive - *What actions should be taken?*
:::

## Setup: `ggplot2`

- Import required packages
- Define a list of layers for consistent styling throughout the project

```{r}
#| code-fold: false
#| echo: true
library(ggplot2)
library(scales)
time_series_ggstyle <- list(
  scale_y_continuous(labels = label_number(scale_cut = cut_si(' ')), expand = c(0, 0.1)),
  theme_bw(base_size = 20),
  theme(
    axis.title.x = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(color = "black"),
    legend.position = 'top'
  )
)
```


## Descriptive

```{r}
#| code-line-numbers: "14,19,22-23"
#| fig-align: center
#| fig-width: 18
#| fig-height: 8
library(readr)
library(stringr)
library(tidyverse)
library(data.table)
options(scipen = 99999)
charts <- fread("charts_at_global.csv.gz")
ts <- str_detect(tolower(charts$artistName), "taylor swift")
charts_ts <- charts[ts, ]
filter(charts_ts, format(day, "%Y") == "2019" & region == "global") |>
  group_by(day) |>
  mutate(streams = sum(streams)) |>
  ggplot(aes(x = day, y = streams)) +
  geom_line() +
  scale_x_date(
    breaks = seq(as.Date("2019-01-01"), as.Date("2019-12-31"), "month"),
    date_labels = "%b"
  ) +
  geom_vline(xintercept = as.Date("2019-08-23"), color = "red") +
  annotate("text", x = as.Date("2019-08-20"), label = "Release of 'Lover'", y = 40000000, colour = "red", angle = 90, size = 8) +
  ggtitle("Taylor Swift Streams", subtitle = "Songs in top 200 - 2019") +
  time_series_ggstyle
```

## Predictive

```{r}
#| cache: true
library(zoo)
library(prophet)
total_streams <- charts |>
  filter(region == "global") |>
  group_by(day) |>
  summarize(y = sum(streams)) |>
  mutate(ds = as.Date(day)) |>
  select(-day)
total_streams_model <- filter(total_streams, ds <= as.Date("2020-12-31"), ds >= as.Date("2019-01-01")) 
total_streams_holdout <- filter(total_streams, ds >= as.Date("2021-01-01"))
mod <- prophet(total_streams_model,
               holidays = data.frame(
                 holiday = "christmas",
                 ds = c(
                    as.Date("2019-12-25"), 
                    as.Date("2020-12-25"), 
                    as.Date("2021-12-25")),
                 lower_window = -1, upper_window = 0
               ),
               daily.seasonality = FALSE
)
future <- make_future_dataframe(mod, periods = 365)
forecast <- predict(mod, future)
plot(mod, forecast) +
  labs(
    y = "Streams",
    title = "Prediction of total global streams of top 200",
    subtitle = "Observed: 2019-2020, forecast: 2021 (holdout: red)"
  ) +
  time_series_ggstyle +
  geom_point(data = total_streams_holdout, 
  aes(x = as.POSIXct(ds), y = y), color = 'red')
```

## What about Causality?

![](Graphics/corr_cause.svg){.r-stretch}

## Causal inference and Prediction

- Variables can be *predictive* without a causal relationship 
- *Correlation does not imply causation*
- Arcade revenue predicts CS doctorates (and vice versa)

. . .

- Variables can be bad predictors but have a causal relationship 
- *No correlation does not imply no causation*
- Fuel used and speed on cruise control (uphill vs. flat)

::: {.r-stack}

::: {.fragment .fade-in-then-out}

:::: {.columns}
::: {.column width="25%"}
![](Graphics/car_straight.png){width=80%}
:::
::: {.column width="25%"}
![](Graphics/car_uphill.png){width=80%}
:::
::::

:::

::: {.fragment}

- Variables can be predictive while not being *predictive*

> [*Correlation does not even imply correlation*](https://statmodeling.stat.columbia.edu/2014/08/04/correlation-even-imply-correlation/)

Andrew Gelman
 
:::
:::

## Selection bias

::: {.fragment}
- For which "population" is the sample representative?
:::

![](Graphics/Survivorship-bias.svg.png){width=50%}

## Example: Causal but no correlation 

```{r}
#| code-line-numbers: "3"
set.seed(123)
xy <- data.frame(x = rnorm(100000))
xy$y <- 0.5 * xy$x^2 + 2 * xy$x^4
ggplot(xy, aes(x = x, y = y)) +
geom_line() +
geom_smooth(method = "lm", color = "blue") +
labs(title = expression(y == 0.5 * x^2 + 2 * x^4), subtitle = "Non-linear relation") +
annotate("text",
x = -1, y = 25,
label = paste0(
"Best linear fit. Correlation: ",
round(cor(xy$x, xy$y), 3)
), hjust = 0, color = "blue", size =8
) +
time_series_ggstyle
```

## Example: Correlation without Correlation

```{r}
set.seed(42)
xy <- data.frame(x = rnorm(1000), y = rnorm(1000))
xy$obs <- abs(xy$x + xy$y) < 0.5 + runif(1000,0,2)
ggplot(xy, aes(x=x, y=y)) +
    geom_point(aes(color=obs)) +
    geom_smooth(data = xy[xy$obs,], 
    method = 'lm', se = FALSE, color = "#00BFC4") +
    geom_smooth(method = 'lm', se = FALSE) +
    time_series_ggstyle +
    labs(color = "Observed",
        title = "Restaurant and location quality", 
        subtitle="Survivor bias",
        y = "Restaurant Quality", x = "Location Quality") +
    annotate('text', 
            x = 2, y = -0.2, hjust=0,
            label = "Population regression line",
            color = "blue", size = 8 ) +
    theme(axis.title.x = element_text())
```
